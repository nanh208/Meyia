// commands/music/play.js ‚Äî Robust /play (plays a fixed link or can be adapted)
const { SlashCommandBuilder, PermissionsBitField } = require("discord.js");

module.exports = {
  data: new SlashCommandBuilder()
    .setName("play")
    .setDescription("Ph√°t b√†i nh·∫°c c·ªë ƒë·ªãnh (Stay) ‚Äî bot ch·ªâ ph√°t duy nh·∫•t link ƒë√£ c·∫•u h√¨nh"),
  // n·∫øu b·∫°n mu·ªën cho ng∆∞·ªùi d√πng nh·∫≠p query, th√™m option string ·ªü ƒë√¢y

  async execute(interaction, client) {
    await interaction.deferReply({ ephemeral: false });

    const voiceChannel = interaction.member.voice.channel;
    if (!voiceChannel) {
      return interaction.editReply("‚ùå B·∫°n ph·∫£i ·ªü trong k√™nh tho·∫°i ƒë·ªÉ ph√°t nh·∫°c.");
    }

    // Check bot permissions in that channel
    const botMember = interaction.guild.members.me;
    const perms = voiceChannel.permissionsFor ? voiceChannel.permissionsFor(botMember) : null;
    if (!perms || !perms.has(PermissionsBitField.Flags.Connect) || !perms.has(PermissionsBitField.Flags.Speak)) {
      return interaction.editReply("‚ùå Bot c·∫ßn quy·ªÅn `CONNECT` v√† `SPEAK` trong k√™nh tho·∫°i n√†y.");
    }

    // FIXED LINK ‚Äî b·∫°n y√™u c·∫ßu ch·ªâ ph√°t duy nh·∫•t link n√†y
    const fixedLink = "https://www.youtube.com/watch?v=yWHrYNP6j4k"; // Stay (The Kid LAROI & Justin Bieber)

    const player = client.player;
    if (!player) return interaction.editReply("‚ùå Player ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng th·ª≠ kh·ªüi ƒë·ªông l·∫°i bot.");

    // create or get queue (discord-player v6+ nodes API)
    let queue = player.nodes.get(interaction.guildId);
    if (!queue) {
      queue = player.nodes.create(interaction.guild, {
        metadata: interaction.channel,
        volume: 80,
        leaveOnEnd: true,
        leaveOnEmpty: true,
        leaveOnEmptyCooldown: 300000,
      });
    }

    try {
      // Ensure the queue has a connection before attempting to play
      if (!queue.connection) {
        try {
          await queue.connect(voiceChannel);
        } catch (connErr) {
          console.error("üîó Could not join voice channel:", connErr);
          if (queue && queue.isEmpty && typeof queue.delete === "function") queue.delete();
          return interaction.editReply("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi k√™nh tho·∫°i. Ki·ªÉm tra quy·ªÅn v√† th·ª≠ l·∫°i.");
        }
      }

      // Search for the fixed link (use appropriate search engine automatically)
      const searchResult = await player.search(fixedLink, { requestedBy: interaction.user });
      if (!searchResult || !searchResult.tracks.length) {
        // As fallback try play-dl stream directly (in case extractor failed)
        try {
          // Use play-dl stream as fallback if available
          if (client.playdl && typeof client.playdl.stream === "function") {
            const stream = await client.playdl.stream(fixedLink).catch(() => null);
            if (stream && stream.stream) {
              // Create a fake track via player.createTrack? Simpler: let player.search find it; if not, inform user
              // For simplicity: inform user extractor failed
              console.error("‚ö†Ô∏è Extractor failed to find track but play-dl had a stream (not auto-added).");
            }
          }
        } catch (fallbackErr) {
          console.warn("‚ö†Ô∏è Fallback stream attempt failed:", fallbackErr?.message ?? fallbackErr);
        }

        if (queue.isEmpty() && !queue.isPlaying()) queue.delete();
        return interaction.editReply("üò¢ Kh√¥ng t√¨m th·∫•y b√†i c·ªë ƒë·ªãnh (extractor kh√¥ng tr·∫£ v·ªÅ track).");
      }

      // Add track(s) to queue
      queue.addTrack(searchResult.tracks);

      // Play if not playing
      if (!queue.isPlaying()) {
        // wrap play call with try/catch to catch immediate playback errors
        try {
          await queue.node.play();
        } catch (playErr) {
          console.error("‚ùå Error when starting playback:", playErr);
          // Cleanup if needed
          if (queue && queue.isEmpty && typeof queue.delete === "function") queue.delete();
          return interaction.editReply("‚ö†Ô∏è Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu ph√°t nh·∫°c. H√£y th·ª≠ l·∫°i sau.");
        }
      }

      // Success response (title available from searchResult.tracks[0])
      const title = searchResult.tracks[0]?.title ?? "B√†i nh·∫°c";
      await interaction.editReply(`üé∂ ƒêang th√™m v√† ph√°t: **${title}**`);
    } catch (err) {
      // Generic catch ‚Äî print error and try best-effort cleanup
      console.error("‚ùå Music error (catch):", err);
      try {
        if (queue && queue.isEmpty && typeof queue.delete === "function") queue.delete();
      } catch (cleanupErr) {
        console.warn("‚ö†Ô∏è Cleanup error:", cleanupErr);
      }
      // Friendly, actionable message to user (no raw stack)
      return interaction.editReply("‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi ph√°t nh·∫°c ‚Äî ƒë√£ ghi log l·ªói, vui l√≤ng th·ª≠ l·∫°i ho·∫∑c b√°o ch·ªß bot.");
    }
  },
};
